// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: queries.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const cancelDepositById = `-- name: CancelDepositById :one

UPDATE deposits
SET
    cancelled = true,
    updated_at = NOW()
WHERE
    id = $1
    AND cancelled = false RETURNING id, external_id, card_id, amount, paid, cancelled, created_at, updated_at
`

func (q *Queries) CancelDepositById(ctx context.Context, id uuid.UUID) (*Deposit, error) {
	row := q.db.QueryRowContext(ctx, cancelDepositById, id)
	var i Deposit
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.CardID,
		&i.Amount,
		&i.Paid,
		&i.Cancelled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createDeposit = `-- name: CreateDeposit :exec

INSERT INTO
    deposits (
        id,
        external_id,
        card_id,
        amount,
        paid,
        created_at,
        updated_at
    )
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateDepositParams struct {
	ID         uuid.UUID
	ExternalID uuid.UUID
	CardID     uuid.UUID
	Amount     string
	Paid       bool
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) CreateDeposit(ctx context.Context, arg CreateDepositParams) error {
	_, err := q.db.ExecContext(ctx, createDeposit,
		arg.ID,
		arg.ExternalID,
		arg.CardID,
		arg.Amount,
		arg.Paid,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getDepositByCardAndExternalId = `-- name: GetDepositByCardAndExternalId :one

SELECT id, external_id, card_id, amount, paid, cancelled, created_at, updated_at FROM deposits WHERE card_id = $1 AND external_id = $2
`

func (q *Queries) GetDepositByCardAndExternalId(ctx context.Context, cardID uuid.UUID, externalID uuid.UUID) (*Deposit, error) {
	row := q.db.QueryRowContext(ctx, getDepositByCardAndExternalId, cardID, externalID)
	var i Deposit
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.CardID,
		&i.Amount,
		&i.Paid,
		&i.Cancelled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getDepositsByCardId = `-- name: GetDepositsByCardId :many

SELECT id, external_id, card_id, amount, paid, cancelled, created_at, updated_at FROM deposits WHERE card_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetDepositsByCardId(ctx context.Context, cardID uuid.UUID) ([]*Deposit, error) {
	rows, err := q.db.QueryContext(ctx, getDepositsByCardId, cardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Deposit
	for rows.Next() {
		var i Deposit
		if err := rows.Scan(
			&i.ID,
			&i.ExternalID,
			&i.CardID,
			&i.Amount,
			&i.Paid,
			&i.Cancelled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaidActiveDepositById = `-- name: UpdatePaidActiveDepositById :one

UPDATE deposits
SET paid = $2, updated_at = NOW()
WHERE
    id = $1
    AND cancelled = false RETURNING id, external_id, card_id, amount, paid, cancelled, created_at, updated_at
`

func (q *Queries) UpdatePaidActiveDepositById(ctx context.Context, iD uuid.UUID, paid bool) (*Deposit, error) {
	row := q.db.QueryRowContext(ctx, updatePaidActiveDepositById, iD, paid)
	var i Deposit
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.CardID,
		&i.Amount,
		&i.Paid,
		&i.Cancelled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
