// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: queries.sql

package card

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBalance = `-- name: CreateBalance :exec

INSERT INTO
    balances (
        id,
        card_id,
        amount,
        created_at,
        updated_at
    )
VALUES ($1, $2, $3, $4, $5)
`

type CreateBalanceParams struct {
	ID        uuid.UUID
	CardID    uuid.UUID
	Amount    string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateBalance(ctx context.Context, arg CreateBalanceParams) error {
	_, err := q.db.ExecContext(ctx, createBalance,
		arg.ID,
		arg.CardID,
		arg.Amount,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createCard = `-- name: CreateCard :exec

INSERT INTO
    cards (
        id,
        external_id,
        name,
        enabled,
        created_at,
        updated_at
    )
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateCardParams struct {
	ID         uuid.UUID
	ExternalID int32
	Name       string
	Enabled    bool
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) error {
	_, err := q.db.ExecContext(ctx, createCard,
		arg.ID,
		arg.ExternalID,
		arg.Name,
		arg.Enabled,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getCard = `-- name: GetCard :one

SELECT id, external_id, name, enabled, created_at, updated_at FROM cards WHERE id = $1
`

func (q *Queries) GetCard(ctx context.Context, id uuid.UUID) (*Card, error) {
	row := q.db.QueryRowContext(ctx, getCard, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Name,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getCardBalance = `-- name: GetCardBalance :one

SELECT amount FROM balances WHERE card_id = $1
`

func (q *Queries) GetCardBalance(ctx context.Context, cardID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getCardBalance, cardID)
	var amount string
	err := row.Scan(&amount)
	return amount, err
}

const getCardByExternalId = `-- name: GetCardByExternalId :one

SELECT id, external_id, name, enabled, created_at, updated_at FROM cards WHERE external_id = $1
`

func (q *Queries) GetCardByExternalId(ctx context.Context, externalID int32) (*Card, error) {
	row := q.db.QueryRowContext(ctx, getCardByExternalId, externalID)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Name,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getCardFull = `-- name: GetCardFull :one

SELECT
    c.id, c.external_id, c.name, c.enabled, c.created_at, c.updated_at,
    b.amount as "balance"
FROM cards c
    INNER JOIN balances b ON b.card_id = c.id
WHERE c.id = $1
`

type GetCardFullRow struct {
	ID         uuid.UUID
	ExternalID int32
	Name       string
	Enabled    bool
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Balance    string
}

func (q *Queries) GetCardFull(ctx context.Context, id uuid.UUID) (*GetCardFullRow, error) {
	row := q.db.QueryRowContext(ctx, getCardFull, id)
	var i GetCardFullRow
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Name,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Balance,
	)
	return &i, err
}

const getCardFullByExternalId = `-- name: GetCardFullByExternalId :one

SELECT
    c.id, c.external_id, c.name, c.enabled, c.created_at, c.updated_at,
    b.amount as "balance"
FROM cards c
    INNER JOIN balances b ON b.card_id = c.id
WHERE c.external_id = $1
`

type GetCardFullByExternalIdRow struct {
	ID         uuid.UUID
	ExternalID int32
	Name       string
	Enabled    bool
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Balance    string
}

func (q *Queries) GetCardFullByExternalId(ctx context.Context, externalID int32) (*GetCardFullByExternalIdRow, error) {
	row := q.db.QueryRowContext(ctx, getCardFullByExternalId, externalID)
	var i GetCardFullByExternalIdRow
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Name,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Balance,
	)
	return &i, err
}

const getCardIdByExternalId = `-- name: GetCardIdByExternalId :one

SELECT id FROM cards WHERE external_id = $1
`

func (q *Queries) GetCardIdByExternalId(ctx context.Context, externalID int32) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getCardIdByExternalId, externalID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateEnabledCardByExternalId = `-- name: UpdateEnabledCardByExternalId :exec

UPDATE cards SET enabled = $2 WHERE external_id = $1
`

func (q *Queries) UpdateEnabledCardByExternalId(ctx context.Context, externalID int32, enabled bool) error {
	_, err := q.db.ExecContext(ctx, updateEnabledCardByExternalId, externalID, enabled)
	return err
}
