// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package cards

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.cancelDepositByExternalIdStmt, err = db.PrepareContext(ctx, cancelDepositByExternalId); err != nil {
		return nil, fmt.Errorf("error preparing query CancelDepositByExternalId: %w", err)
	}
	if q.createBalanceStmt, err = db.PrepareContext(ctx, createBalance); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBalance: %w", err)
	}
	if q.createCardStmt, err = db.PrepareContext(ctx, createCard); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCard: %w", err)
	}
	if q.createDepositStmt, err = db.PrepareContext(ctx, createDeposit); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDeposit: %w", err)
	}
	if q.createLedgerStmt, err = db.PrepareContext(ctx, createLedger); err != nil {
		return nil, fmt.Errorf("error preparing query CreateLedger: %w", err)
	}
	if q.getCardStmt, err = db.PrepareContext(ctx, getCard); err != nil {
		return nil, fmt.Errorf("error preparing query GetCard: %w", err)
	}
	if q.getCardBalanceStmt, err = db.PrepareContext(ctx, getCardBalance); err != nil {
		return nil, fmt.Errorf("error preparing query GetCardBalance: %w", err)
	}
	if q.getCardByExternalIdStmt, err = db.PrepareContext(ctx, getCardByExternalId); err != nil {
		return nil, fmt.Errorf("error preparing query GetCardByExternalId: %w", err)
	}
	if q.getCardFullStmt, err = db.PrepareContext(ctx, getCardFull); err != nil {
		return nil, fmt.Errorf("error preparing query GetCardFull: %w", err)
	}
	if q.getCardFullByExternalIdStmt, err = db.PrepareContext(ctx, getCardFullByExternalId); err != nil {
		return nil, fmt.Errorf("error preparing query GetCardFullByExternalId: %w", err)
	}
	if q.getCardIdByExternalIdStmt, err = db.PrepareContext(ctx, getCardIdByExternalId); err != nil {
		return nil, fmt.Errorf("error preparing query GetCardIdByExternalId: %w", err)
	}
	if q.getDepositsByExternalCardIdStmt, err = db.PrepareContext(ctx, getDepositsByExternalCardId); err != nil {
		return nil, fmt.Errorf("error preparing query GetDepositsByExternalCardId: %w", err)
	}
	if q.increaseCardBalanceStmt, err = db.PrepareContext(ctx, increaseCardBalance); err != nil {
		return nil, fmt.Errorf("error preparing query IncreaseCardBalance: %w", err)
	}
	if q.updateEnabledCardByExternalIdStmt, err = db.PrepareContext(ctx, updateEnabledCardByExternalId); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEnabledCardByExternalId: %w", err)
	}
	if q.updatePaidActiveDepositByExternalIdStmt, err = db.PrepareContext(ctx, updatePaidActiveDepositByExternalId); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePaidActiveDepositByExternalId: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.cancelDepositByExternalIdStmt != nil {
		if cerr := q.cancelDepositByExternalIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cancelDepositByExternalIdStmt: %w", cerr)
		}
	}
	if q.createBalanceStmt != nil {
		if cerr := q.createBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBalanceStmt: %w", cerr)
		}
	}
	if q.createCardStmt != nil {
		if cerr := q.createCardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCardStmt: %w", cerr)
		}
	}
	if q.createDepositStmt != nil {
		if cerr := q.createDepositStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDepositStmt: %w", cerr)
		}
	}
	if q.createLedgerStmt != nil {
		if cerr := q.createLedgerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createLedgerStmt: %w", cerr)
		}
	}
	if q.getCardStmt != nil {
		if cerr := q.getCardStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCardStmt: %w", cerr)
		}
	}
	if q.getCardBalanceStmt != nil {
		if cerr := q.getCardBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCardBalanceStmt: %w", cerr)
		}
	}
	if q.getCardByExternalIdStmt != nil {
		if cerr := q.getCardByExternalIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCardByExternalIdStmt: %w", cerr)
		}
	}
	if q.getCardFullStmt != nil {
		if cerr := q.getCardFullStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCardFullStmt: %w", cerr)
		}
	}
	if q.getCardFullByExternalIdStmt != nil {
		if cerr := q.getCardFullByExternalIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCardFullByExternalIdStmt: %w", cerr)
		}
	}
	if q.getCardIdByExternalIdStmt != nil {
		if cerr := q.getCardIdByExternalIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCardIdByExternalIdStmt: %w", cerr)
		}
	}
	if q.getDepositsByExternalCardIdStmt != nil {
		if cerr := q.getDepositsByExternalCardIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDepositsByExternalCardIdStmt: %w", cerr)
		}
	}
	if q.increaseCardBalanceStmt != nil {
		if cerr := q.increaseCardBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing increaseCardBalanceStmt: %w", cerr)
		}
	}
	if q.updateEnabledCardByExternalIdStmt != nil {
		if cerr := q.updateEnabledCardByExternalIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEnabledCardByExternalIdStmt: %w", cerr)
		}
	}
	if q.updatePaidActiveDepositByExternalIdStmt != nil {
		if cerr := q.updatePaidActiveDepositByExternalIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePaidActiveDepositByExternalIdStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                      DBTX
	tx                                      *sql.Tx
	cancelDepositByExternalIdStmt           *sql.Stmt
	createBalanceStmt                       *sql.Stmt
	createCardStmt                          *sql.Stmt
	createDepositStmt                       *sql.Stmt
	createLedgerStmt                        *sql.Stmt
	getCardStmt                             *sql.Stmt
	getCardBalanceStmt                      *sql.Stmt
	getCardByExternalIdStmt                 *sql.Stmt
	getCardFullStmt                         *sql.Stmt
	getCardFullByExternalIdStmt             *sql.Stmt
	getCardIdByExternalIdStmt               *sql.Stmt
	getDepositsByExternalCardIdStmt         *sql.Stmt
	increaseCardBalanceStmt                 *sql.Stmt
	updateEnabledCardByExternalIdStmt       *sql.Stmt
	updatePaidActiveDepositByExternalIdStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                      tx,
		tx:                                      tx,
		cancelDepositByExternalIdStmt:           q.cancelDepositByExternalIdStmt,
		createBalanceStmt:                       q.createBalanceStmt,
		createCardStmt:                          q.createCardStmt,
		createDepositStmt:                       q.createDepositStmt,
		createLedgerStmt:                        q.createLedgerStmt,
		getCardStmt:                             q.getCardStmt,
		getCardBalanceStmt:                      q.getCardBalanceStmt,
		getCardByExternalIdStmt:                 q.getCardByExternalIdStmt,
		getCardFullStmt:                         q.getCardFullStmt,
		getCardFullByExternalIdStmt:             q.getCardFullByExternalIdStmt,
		getCardIdByExternalIdStmt:               q.getCardIdByExternalIdStmt,
		getDepositsByExternalCardIdStmt:         q.getDepositsByExternalCardIdStmt,
		increaseCardBalanceStmt:                 q.increaseCardBalanceStmt,
		updateEnabledCardByExternalIdStmt:       q.updateEnabledCardByExternalIdStmt,
		updatePaidActiveDepositByExternalIdStmt: q.updatePaidActiveDepositByExternalIdStmt,
	}
}
