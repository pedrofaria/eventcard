// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: queries.sql

package cards

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const cancelDepositByExternalId = `-- name: CancelDepositByExternalId :one
UPDATE deposits SET cancelled = true WHERE external_id = $1 AND cancelled = false
RETURNING id, external_id, card_id, amount, paid, cancelled, created_at, updated_at
`

func (q *Queries) CancelDepositByExternalId(ctx context.Context, externalID uuid.UUID) (Deposit, error) {
	row := q.queryRow(ctx, q.cancelDepositByExternalIdStmt, cancelDepositByExternalId, externalID)
	var i Deposit
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.CardID,
		&i.Amount,
		&i.Paid,
		&i.Cancelled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createBalance = `-- name: CreateBalance :exec
INSERT INTO balances (id, card_id, amount, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateBalanceParams struct {
	ID        uuid.UUID
	CardID    uuid.UUID
	Amount    string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateBalance(ctx context.Context, arg CreateBalanceParams) error {
	_, err := q.exec(ctx, q.createBalanceStmt, createBalance,
		arg.ID,
		arg.CardID,
		arg.Amount,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createCard = `-- name: CreateCard :exec
INSERT INTO cards (id, external_id, name, enabled, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateCardParams struct {
	ID         uuid.UUID
	ExternalID int32
	Name       string
	Enabled    bool
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) error {
	_, err := q.exec(ctx, q.createCardStmt, createCard,
		arg.ID,
		arg.ExternalID,
		arg.Name,
		arg.Enabled,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createDeposit = `-- name: CreateDeposit :exec
INSERT INTO deposits (id, external_id, card_id, amount, paid, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateDepositParams struct {
	ID         uuid.UUID
	ExternalID uuid.UUID
	CardID     uuid.UUID
	Amount     string
	Paid       bool
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) CreateDeposit(ctx context.Context, arg CreateDepositParams) error {
	_, err := q.exec(ctx, q.createDepositStmt, createDeposit,
		arg.ID,
		arg.ExternalID,
		arg.CardID,
		arg.Amount,
		arg.Paid,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createLedger = `-- name: CreateLedger :exec
INSERT INTO ledgers (id, card_id, reference, reference_id, amount, created_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateLedgerParams struct {
	ID          uuid.UUID
	CardID      uuid.UUID
	Reference   Reference
	ReferenceID uuid.UUID
	Amount      string
	CreatedAt   time.Time
}

func (q *Queries) CreateLedger(ctx context.Context, arg CreateLedgerParams) error {
	_, err := q.exec(ctx, q.createLedgerStmt, createLedger,
		arg.ID,
		arg.CardID,
		arg.Reference,
		arg.ReferenceID,
		arg.Amount,
		arg.CreatedAt,
	)
	return err
}

const getCard = `-- name: GetCard :one
SELECT id, external_id, name, enabled, created_at, updated_at FROM cards WHERE id = $1
`

func (q *Queries) GetCard(ctx context.Context, id uuid.UUID) (Card, error) {
	row := q.queryRow(ctx, q.getCardStmt, getCard, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Name,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCardBalance = `-- name: GetCardBalance :one
SELECT amount FROM balances
WHERE card_id = $1
`

func (q *Queries) GetCardBalance(ctx context.Context, cardID uuid.UUID) (string, error) {
	row := q.queryRow(ctx, q.getCardBalanceStmt, getCardBalance, cardID)
	var amount string
	err := row.Scan(&amount)
	return amount, err
}

const getCardByExternalId = `-- name: GetCardByExternalId :one
SELECT id, external_id, name, enabled, created_at, updated_at FROM cards WHERE external_id = $1
`

func (q *Queries) GetCardByExternalId(ctx context.Context, externalID int32) (Card, error) {
	row := q.queryRow(ctx, q.getCardByExternalIdStmt, getCardByExternalId, externalID)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Name,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCardFull = `-- name: GetCardFull :one
SELECT c.id, c.external_id, c.name, c.enabled, c.created_at, c.updated_at, b.amount as "balance"
FROM cards c
  INNER JOIN balances b ON b.card_id = c.id
WHERE c.id = $1
`

type GetCardFullRow struct {
	ID         uuid.UUID
	ExternalID int32
	Name       string
	Enabled    bool
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Balance    string
}

func (q *Queries) GetCardFull(ctx context.Context, id uuid.UUID) (GetCardFullRow, error) {
	row := q.queryRow(ctx, q.getCardFullStmt, getCardFull, id)
	var i GetCardFullRow
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Name,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Balance,
	)
	return i, err
}

const getCardFullByExternalId = `-- name: GetCardFullByExternalId :one
SELECT c.id, c.external_id, c.name, c.enabled, c.created_at, c.updated_at, b.amount as "balance"
FROM cards c
  INNER JOIN balances b ON b.card_id = c.id
WHERE c.external_id = $1
`

type GetCardFullByExternalIdRow struct {
	ID         uuid.UUID
	ExternalID int32
	Name       string
	Enabled    bool
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Balance    string
}

func (q *Queries) GetCardFullByExternalId(ctx context.Context, externalID int32) (GetCardFullByExternalIdRow, error) {
	row := q.queryRow(ctx, q.getCardFullByExternalIdStmt, getCardFullByExternalId, externalID)
	var i GetCardFullByExternalIdRow
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Name,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Balance,
	)
	return i, err
}

const getCardIdByExternalId = `-- name: GetCardIdByExternalId :one
SELECT id FROM cards WHERE external_id = $1
`

func (q *Queries) GetCardIdByExternalId(ctx context.Context, externalID int32) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.getCardIdByExternalIdStmt, getCardIdByExternalId, externalID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getDepositsByExternalCardId = `-- name: GetDepositsByExternalCardId :many
SELECT d.id, d.external_id, d.card_id, d.amount, d.paid, d.cancelled, d.created_at, d.updated_at
FROM cards c
  INNER JOIN deposits d ON d.card_id = c.id
WHERE c.external_id = $1
`

func (q *Queries) GetDepositsByExternalCardId(ctx context.Context, externalID int32) ([]Deposit, error) {
	rows, err := q.query(ctx, q.getDepositsByExternalCardIdStmt, getDepositsByExternalCardId, externalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deposit
	for rows.Next() {
		var i Deposit
		if err := rows.Scan(
			&i.ID,
			&i.ExternalID,
			&i.CardID,
			&i.Amount,
			&i.Paid,
			&i.Cancelled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const increaseCardBalance = `-- name: IncreaseCardBalance :exec
UPDATE balances SET amount = amount + $1
WHERE card_id = $2
`

type IncreaseCardBalanceParams struct {
	Amount string
	CardID uuid.UUID
}

func (q *Queries) IncreaseCardBalance(ctx context.Context, arg IncreaseCardBalanceParams) error {
	_, err := q.exec(ctx, q.increaseCardBalanceStmt, increaseCardBalance, arg.Amount, arg.CardID)
	return err
}

const updateEnabledCardByExternalId = `-- name: UpdateEnabledCardByExternalId :exec
UPDATE cards SET enabled = $2 WHERE external_id = $1
`

type UpdateEnabledCardByExternalIdParams struct {
	ExternalID int32
	Enabled    bool
}

func (q *Queries) UpdateEnabledCardByExternalId(ctx context.Context, arg UpdateEnabledCardByExternalIdParams) error {
	_, err := q.exec(ctx, q.updateEnabledCardByExternalIdStmt, updateEnabledCardByExternalId, arg.ExternalID, arg.Enabled)
	return err
}

const updatePaidActiveDepositByExternalId = `-- name: UpdatePaidActiveDepositByExternalId :exec
UPDATE deposits SET paid = $2 WHERE external_id = $1 AND cancelled = false
`

type UpdatePaidActiveDepositByExternalIdParams struct {
	ExternalID uuid.UUID
	Paid       bool
}

func (q *Queries) UpdatePaidActiveDepositByExternalId(ctx context.Context, arg UpdatePaidActiveDepositByExternalIdParams) error {
	_, err := q.exec(ctx, q.updatePaidActiveDepositByExternalIdStmt, updatePaidActiveDepositByExternalId, arg.ExternalID, arg.Paid)
	return err
}
